(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{448:function(a,t,_){"use strict";_.r(t);var v=_(2),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"一-java中类与对象的关系与区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-java中类与对象的关系与区别"}},[a._v("#")]),a._v(" 一.java中类与对象的关系与区别")]),a._v(" "),t("h6",{attrs:{id:"_1-什么是类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是类"}},[a._v("#")]),a._v(" 1.什么是类？")]),a._v(" "),t("p",[a._v("类就是具备某些共同特征的实体的集合，它是一种抽象的数据类型，它是对所具有相同特征实体的抽象。在面向对象的程序设计语言中，类是对一类“事物”的属性与行为的抽象。")]),a._v(" "),t("h6",{attrs:{id:"_2-什么是对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是对象"}},[a._v("#")]),a._v(" 2.什么是对象？")]),a._v(" "),t("p",[a._v("对象就是一个真实世界中的实体，对象与实体是一一对应关系的，意思就是现实世界的每一个实体都是一个对象，所以对象是一个具体的概念。")]),a._v(" "),t("h6",{attrs:{id:"_3-类是对象的一个集合-对象是类的实例。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-类是对象的一个集合-对象是类的实例。"}},[a._v("#")]),a._v(" 3.类是对象的一个集合，对象是类的实例。")]),a._v(" "),t("h2",{attrs:{id:"二-面向对象-oo-的含义与优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-面向对象-oo-的含义与优点"}},[a._v("#")]),a._v(" 二.面向对象(OO)的含义与优点")]),a._v(" "),t("h6",{attrs:{id:"_1-面向对象-oo-的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向对象-oo-的优点"}},[a._v("#")]),a._v(" 1.面向对象(OO)的优点=>")]),a._v(" "),t("ol",[t("li",[a._v("与人类的思维习惯一致:把人类解决问题的思维过程转变为程序能够理解的过程")]),a._v(" "),t("li",[a._v("信息隐藏,提高了程序的可维护性和安全性:\n"),t("ol",[t("li",[a._v("封装实现了模块化和信息隐藏")]),a._v(" "),t("li",[a._v("封装使得在对象外部不能随意访问对象的属性和方法")])])]),a._v(" "),t("li",[a._v("提高了程序的可重用性\n"),t("ol",[t("li",[a._v("一个类乐意创建多个对象实例,增加了重用性")])])])]),a._v(" "),t("h6",{attrs:{id:"_2-oo的分类与含义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-oo的分类与含义"}},[a._v("#")]),a._v(" 2.OO的分类与含义")]),a._v(" "),t("ul",[t("li",[a._v("OOP:面向对象的变成")]),a._v(" "),t("li",[a._v("OOA:面向对象的分析")]),a._v(" "),t("li",[a._v("OOD:面向对象的设计")])]),a._v(" "),t("h2",{attrs:{id:"三-成员变量与局部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-成员变量与局部变量"}},[a._v("#")]),a._v(" 三.成员变量与局部变量")]),a._v(" "),t("h5",{attrs:{id:"_1-变量优先级判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量优先级判断"}},[a._v("#")]),a._v(" 1.变量优先级判断")]),a._v(" "),t("p",[a._v("​\t\t\t\ta. 范围越小,优先级越高")]),a._v(" "),t("p",[a._v("​\t\t\t\tb. 越晚出现,优先级越高")]),a._v(" "),t("h5",{attrs:{id:"_2-成员变量与局部变量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-成员变量与局部变量的区别"}},[a._v("#")]),a._v(" 2.成员变量与局部变量的区别")]),a._v(" "),t("h6",{attrs:{id:"a-作用域不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-作用域不同"}},[a._v("#")]),a._v(" a.作用域不同=>")]),a._v(" "),t("p",[a._v("​\t\t\t\t\t\t*  局部变量的作用域仅限与定义它的方法")]),a._v(" "),t("p",[a._v("​\t\t\t\t\t\t* 成员变量的作用域在整个类内部都是可见的")]),a._v(" "),t("h6",{attrs:{id:"b-初始值不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-初始值不同"}},[a._v("#")]),a._v(" b.初始值不同=>")]),a._v(" "),t("p",[a._v("​\t\t\t\t\t\t* java会给成员变量一个初始值")]),a._v(" "),t("p",[a._v("​\t\t\t\t\t\t* java不会给局部变量赋予初始值")]),a._v(" "),t("h6",{attrs:{id:"c-在同一个方法中-不允许有同名局部变量-在不同方法中可以有同名方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-在同一个方法中-不允许有同名局部变量-在不同方法中可以有同名方法"}},[a._v("#")]),a._v(" c.在同一个方法中,不允许有同名局部变量;在不同方法中可以有同名方法")]),a._v(" "),t("h6",{attrs:{id:"d-两类变量同名时-局部变量具有更高优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#d-两类变量同名时-局部变量具有更高优先级"}},[a._v("#")]),a._v(" d.两类变量同名时,局部变量具有更高优先级")]),a._v(" "),t("h2",{attrs:{id:"四-javadoc注释-生成注释文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-javadoc注释-生成注释文档"}},[a._v("#")]),a._v(" 四.JavaDoc注释(生成注释文档)")]),a._v(" "),t("ol",[t("li",[t("h6",{attrs:{id:"生成注释-两个-号是javadoc-一个-号是多行注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成注释-两个-号是javadoc-一个-号是多行注释"}},[a._v("#")]),a._v(" 生成注释(两个**号是JavaDoc,一个*号是多行注释)")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**+回车\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n * @author 洪\n * @version 1.0\n */\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("h6",{attrs:{id:"导出以及查看文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出以及查看文档"}},[a._v("#")]),a._v(" 导出以及查看文档")]),a._v(" "),t("ol",[t("li",[a._v("右键项目导出(Export)=>java=>javadoc=>选择导出位置")]),a._v(" "),t("li",[a._v("在生成文件中查看index.html")])])])]),a._v(" "),t("p",[a._v("​")]),a._v(" "),t("h2",{attrs:{id:"五-本章总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-本章总结"}},[a._v("#")]),a._v(" 五.本章总结")]),a._v(" "),t("h4",{attrs:{id:"_1-对象与类总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象与类总结"}},[a._v("#")]),a._v(" (1).对象与类总结=>")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("对象是用来描述客观事物的一个实体")])]),a._v(" "),t("li",[t("p",[a._v("类定义了对象将会拥有的特征(属性)和行为(方法)")])]),a._v(" "),t("li",[t("p",[a._v("类是对象的类型,对象是类的实例")])]),a._v(" "),t("li",[t("p",[a._v("使用类的步骤")]),a._v(" "),t("ol",[t("li",[a._v("定义类:使用关键字class")]),a._v(" "),t("li",[a._v("创建类的对象:使用关键字new")]),a._v(" "),t("li",[a._v('使用类的属性与方法:使用"."等操作符')])])])]),a._v(" "),t("h4",{attrs:{id:"_2-类的无参方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-类的无参方法"}},[a._v("#")]),a._v(" (2).类的无参方法=>")]),a._v(" "),t("h6",{attrs:{id:"_1-定义类的方法必须包括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义类的方法必须包括"}},[a._v("#")]),a._v(" 1.定义类的方法必须包括:")]),a._v(" "),t("ol",[t("li",[a._v("方法的名称")]),a._v(" "),t("li",[a._v("方法返回值的类型")]),a._v(" "),t("li",[a._v("方法的主体")])]),a._v(" "),t("h6",{attrs:{id:"_2-调用类方法的两种形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-调用类方法的两种形式"}},[a._v("#")]),a._v(" 2.调用类方法的两种形式:")]),a._v(" "),t("ol",[t("li",[a._v('同一个类中的方法,直接使用"==方法名()=="调用')]),a._v(" "),t("li",[a._v('不同类的方法,先==创建对象==,在使用=="对象名.方法名()"==调用')])]),a._v(" "),t("h6",{attrs:{id:"_3-成员变量和局部变量的不同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-成员变量和局部变量的不同点"}},[a._v("#")]),a._v(" 3.成员变量和局部变量的不同点:")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("作用域不同:")]),a._v(" "),t("ol",[t("li",[a._v("成员变量在整个类都是可见的")]),a._v(" "),t("li",[a._v("局部变量仅限于定义它的方法内")])])]),a._v(" "),t("li",[t("p",[a._v("初始值不同:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1.    java会为成员变量赋予初值\n2.    java不会为局部变量赋予初值\n")])])])]),a._v(" "),t("li",[t("p",[a._v("在同一个方法中,不允许有同名局部变量;在不同方法中可以有同名方法")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("两类变量同名时,局部变量具有更高优先级\n")])])]),t("h6",{attrs:{id:"_4-注释符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-注释符"}},[a._v("#")]),a._v(" 4.注释符:")]),a._v(" "),t("ol",[t("li",[a._v("单行注释://")]),a._v(" "),t("li",[a._v("多行注释/* */")]),a._v(" "),t("li",[a._v("JavaDoc注释/** */")])]),a._v(" "),t("h5",{attrs:{id:"_3-类的带参方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-类的带参方法"}},[a._v("#")]),a._v(" (3).类的带参方法:")]),a._v(" "),t("ol",[t("li",[a._v("带参方法定义的一般形式:")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("```\n<访问修饰符> 返回类型 <方法名> (<形式参数>){\n\t\t\t//方法的主体\n}\n```\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("参数的概念:\n"),t("ol",[t("li",[a._v("形参是在定义方法时对参数的称呼")]),a._v(" "),t("li",[a._v("实参是在调用时传递给方法的实际的值")])])]),a._v(" "),t("li",[a._v("调用带参方法时要求实参与形参要匹配")])]),a._v(" "),t("h2",{attrs:{id:"六-遗留问题及解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-遗留问题及解决"}},[a._v("#")]),a._v(" 六.遗留问题及解决")]),a._v(" "),t("h6",{attrs:{id:"_1-srring明明是引用类型参数-但是为什么没有改变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-srring明明是引用类型参数-但是为什么没有改变"}},[a._v("#")]),a._v(" 1.Srring明明是引用类型参数,但是为什么没有改变")])])}),[],!1,null,null,null);t.default=s.exports}}]);